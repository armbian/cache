name: uboot-simple

on:
  schedule:
    - cron: '0 1 * * *' # Scheduled runs every day at 2am UTC
  workflow_dispatch:

jobs:

  "u-boot":
    if: ${{ github.repository_owner == 'armbian' }}
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix:
        include:
          - board: "odroidn2"
            branch: "edge"
            runner_tags: ubuntu-latest #[ "self-hosted", "Linux", 'armbian', "artifact-uboot" ]
            variant: "" # empty
          - board: "khadas-vim3l"
            branch: "edge"
            runner_tags: ubuntu-latest #[[ "self-hosted", "Linux", 'armbian', "artifact-uboot" ]
            variant: "" # empty
    runs-on: "${{ matrix.runner_tags }}"
    name: "${{ matrix.board }} ${{ matrix.branch }} (${{ matrix.variant }})"
    env:
      BOARD: "${{ matrix.board }}"
      BRANCH: "${{ matrix.branch }}"
      VARIANT: "${{ matrix.variant }}"
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
    steps:

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: armbian/build #${{ github.repository_owner }}/armbian-build
          ref: main
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build U-Boot ${{env.BOARD}}:${{env.BRANCH}} (variant ${{env.VARIANT}})
        id: uboot
        run: |
          # BRANCH and BOARD are in the env, but Docker doesn't know that; (sudo has --preserve-env). So we need to pass them as args.
          # let VARIANT expand
          # SHARE_LOG=yes to share logs to pastebin
          bash ./compile.sh uboot \
            "BRANCH=${{env.BRANCH}}" "BOARD=${{env.BOARD}}" ${{env.VARIANT}} \
            SHARE_LOG=yes
